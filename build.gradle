plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.leejeonghoon'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter'

    // Spring Framework 명시적 버전 추가
    implementation 'org.springframework:spring-context:6.2.1'
    implementation 'org.springframework:spring-web:6.2.1'

    // Spring Boot Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'mysql:mysql-connector-java:8.0.33'
    runtimeOnly 'com.h2database:h2'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

}


test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed" // 성공, 스킵, 실패 테스트 로그 출력
        exceptionFormat "full" // 전체 예외 출력
        showStandardStreams = true // System.out 출력 허용

        // 테스트 시작과 결과 출력
        beforeTest { descriptor ->
            logger.lifecycle("테스트 시작: ${descriptor.displayName}")
        }
        afterTest { descriptor, result ->
            logger.lifecycle("테스트 종료: ${descriptor.displayName} - 결과: ${result.resultType}")
        }
    }
}